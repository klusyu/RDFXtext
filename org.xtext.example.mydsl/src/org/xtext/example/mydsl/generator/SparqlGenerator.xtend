/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.sparql.Query
import org.xtext.example.mydsl.sparql.Prologue
import org.xtext.example.mydsl.sparql.SelectQuery
import java.util.List
import org.xtext.example.mydsl.sparql.Qname
import org.xtext.example.mydsl.sparql.VarOrIri
import org.xtext.example.mydsl.sparql.Verb

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SparqlGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// print("Generate:" + resource.className + ".xmi\r\n")
		var path = "rdf_example.xmi"
		fsa.generateFile(path, toXMI(resource.contents.head as Query))
	}
	
	protected def String toXMI(Query query) {
		var sparql = new Element("sparql")
		sparql.addElements(query.prologue.generatePrologue)
		sparql.addElement(query.selectQuery.generateSelectQuery)
		return sparql.toXMI("")
	}
	
	protected def List<Element> generatePrologue(Prologue p) {
		var decls = newArrayList()
		for(decl: p.prefixDecl) {
			var e = new Element("prefix")
			e.addAttribute("name", decl.name.TrimName)
			e.addAttribute("iri", decl.iri.TrimName)
			decls.add(e)
		}
		return decls
	}
	
	protected def Element generateSelectQuery(SelectQuery s) {
		var select = new Element("select")
		for (v: s.variables) {
			var variable = new Element("variables")
			variable.addAttribute("name", v.name)
			select.addElement(variable)
		}
		
		var where = new Element("where")
		for(tss: s.whereClause.triplesBlock.triplesSameSubject) {
			var subject = tss.subject
			var verb = tss.verb
			var object = tss.object
			var pattern = new Element("patterns")
			pattern.addAttribute("subject", subject.toText.TrimName)
			pattern.addAttribute("predicate", verb.toText.TrimName)
			pattern.addAttribute("object", object.toText.TrimName)
			where.addElement(pattern)
			for (property: tss.properties) {
				var subVerb = property.verb
				var subOject = property.object
				var subPattern = new Element("patterns")
				subPattern.addAttribute("subject", subject.toText.TrimName)
				subPattern.addAttribute("predicate", subVerb.toText.TrimName)
				subPattern.addAttribute("object", subOject.toText.TrimName)
				where.addElement(subPattern)
			}
		}
		
		select.addElement(where)
		return select
	}
	
	protected def String TrimName(String s) {
		var trimmed = s.trim()
		trimmed = trimmed.replaceAll("^<|>$", "")
		trimmed = trimmed.replaceAll(":$", "")
		return trimmed
	}
	
	protected def toText(Verb v) {
		if (v.isA !== null) {
			return 'a'
		}
		else{
			return v.varOrIri.toText
		}
	}
	
	protected def toText(VarOrIri s) {
		if (s.variable !== null) {
			return s.variable.name
		}
		else if (s.iri !== null){
			return s.iri
		}
		else if (s.qname !== null) {
			return s.qname.name
		}
	}
	
	protected def toText(Qname qname) {
		var str = ""
		if (qname.prefixName !== null) {
			str = qname.prefixName
		}
		if (qname.name !== null) {
			str += qname.name
		}
		return str
	}
}
