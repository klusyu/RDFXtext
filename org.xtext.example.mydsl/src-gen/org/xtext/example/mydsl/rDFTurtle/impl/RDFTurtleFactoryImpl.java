/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.rDFTurtle.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.rDFTurtle.Base;
import org.xtext.example.mydsl.rDFTurtle.Blank;
import org.xtext.example.mydsl.rDFTurtle.Collection;
import org.xtext.example.mydsl.rDFTurtle.DatatypeString;
import org.xtext.example.mydsl.rDFTurtle.Directive;
import org.xtext.example.mydsl.rDFTurtle.ItemList;
import org.xtext.example.mydsl.rDFTurtle.LanguageString;
import org.xtext.example.mydsl.rDFTurtle.Literal;
import org.xtext.example.mydsl.rDFTurtle.NodeID;
import org.xtext.example.mydsl.rDFTurtle.ObjectList;
import org.xtext.example.mydsl.rDFTurtle.PredicateObject;
import org.xtext.example.mydsl.rDFTurtle.PredicateObjectList;
import org.xtext.example.mydsl.rDFTurtle.PrefixID;
import org.xtext.example.mydsl.rDFTurtle.Qname;
import org.xtext.example.mydsl.rDFTurtle.RDFTurtleFactory;
import org.xtext.example.mydsl.rDFTurtle.RDFTurtlePackage;
import org.xtext.example.mydsl.rDFTurtle.SparqlBase;
import org.xtext.example.mydsl.rDFTurtle.SparqlPrefix;
import org.xtext.example.mydsl.rDFTurtle.Statement;
import org.xtext.example.mydsl.rDFTurtle.Subject;
import org.xtext.example.mydsl.rDFTurtle.Triples;
import org.xtext.example.mydsl.rDFTurtle.TurtleDoc;
import org.xtext.example.mydsl.rDFTurtle.Verb;
import org.xtext.example.mydsl.rDFTurtle.iResource;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RDFTurtleFactoryImpl extends EFactoryImpl implements RDFTurtleFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RDFTurtleFactory init()
  {
    try
    {
      RDFTurtleFactory theRDFTurtleFactory = (RDFTurtleFactory)EPackage.Registry.INSTANCE.getEFactory(RDFTurtlePackage.eNS_URI);
      if (theRDFTurtleFactory != null)
      {
        return theRDFTurtleFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RDFTurtleFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RDFTurtleFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RDFTurtlePackage.TURTLE_DOC: return createTurtleDoc();
      case RDFTurtlePackage.STATEMENT: return createStatement();
      case RDFTurtlePackage.DIRECTIVE: return createDirective();
      case RDFTurtlePackage.PREFIX_ID: return createPrefixID();
      case RDFTurtlePackage.BASE: return createBase();
      case RDFTurtlePackage.SPARQL_PREFIX: return createSparqlPrefix();
      case RDFTurtlePackage.SPARQL_BASE: return createSparqlBase();
      case RDFTurtlePackage.TRIPLES: return createTriples();
      case RDFTurtlePackage.PREDICATE_OBJECT: return createPredicateObject();
      case RDFTurtlePackage.PREDICATE_OBJECT_LIST: return createPredicateObjectList();
      case RDFTurtlePackage.OBJECT_LIST: return createObjectList();
      case RDFTurtlePackage.VERB: return createVerb();
      case RDFTurtlePackage.SUBJECT: return createSubject();
      case RDFTurtlePackage.IRESOURCE: return createiResource();
      case RDFTurtlePackage.OBJECT: return createObject();
      case RDFTurtlePackage.LANGUAGE_STRING: return createLanguageString();
      case RDFTurtlePackage.LITERAL: return createLiteral();
      case RDFTurtlePackage.DATATYPE_STRING: return createDatatypeString();
      case RDFTurtlePackage.BLANK: return createBlank();
      case RDFTurtlePackage.ITEM_LIST: return createItemList();
      case RDFTurtlePackage.COLLECTION: return createCollection();
      case RDFTurtlePackage.NODE_ID: return createNodeID();
      case RDFTurtlePackage.QNAME: return createQname();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurtleDoc createTurtleDoc()
  {
    TurtleDocImpl turtleDoc = new TurtleDocImpl();
    return turtleDoc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directive createDirective()
  {
    DirectiveImpl directive = new DirectiveImpl();
    return directive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrefixID createPrefixID()
  {
    PrefixIDImpl prefixID = new PrefixIDImpl();
    return prefixID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Base createBase()
  {
    BaseImpl base = new BaseImpl();
    return base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SparqlPrefix createSparqlPrefix()
  {
    SparqlPrefixImpl sparqlPrefix = new SparqlPrefixImpl();
    return sparqlPrefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SparqlBase createSparqlBase()
  {
    SparqlBaseImpl sparqlBase = new SparqlBaseImpl();
    return sparqlBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Triples createTriples()
  {
    TriplesImpl triples = new TriplesImpl();
    return triples;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredicateObject createPredicateObject()
  {
    PredicateObjectImpl predicateObject = new PredicateObjectImpl();
    return predicateObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredicateObjectList createPredicateObjectList()
  {
    PredicateObjectListImpl predicateObjectList = new PredicateObjectListImpl();
    return predicateObjectList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectList createObjectList()
  {
    ObjectListImpl objectList = new ObjectListImpl();
    return objectList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Verb createVerb()
  {
    VerbImpl verb = new VerbImpl();
    return verb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subject createSubject()
  {
    SubjectImpl subject = new SubjectImpl();
    return subject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public iResource createiResource()
  {
    iResourceImpl iResource = new iResourceImpl();
    return iResource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.rDFTurtle.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LanguageString createLanguageString()
  {
    LanguageStringImpl languageString = new LanguageStringImpl();
    return languageString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatatypeString createDatatypeString()
  {
    DatatypeStringImpl datatypeString = new DatatypeStringImpl();
    return datatypeString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Blank createBlank()
  {
    BlankImpl blank = new BlankImpl();
    return blank;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ItemList createItemList()
  {
    ItemListImpl itemList = new ItemListImpl();
    return itemList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Collection createCollection()
  {
    CollectionImpl collection = new CollectionImpl();
    return collection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeID createNodeID()
  {
    NodeIDImpl nodeID = new NodeIDImpl();
    return nodeID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Qname createQname()
  {
    QnameImpl qname = new QnameImpl();
    return qname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RDFTurtlePackage getRDFTurtlePackage()
  {
    return (RDFTurtlePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RDFTurtlePackage getPackage()
  {
    return RDFTurtlePackage.eINSTANCE;
  }

} //RDFTurtleFactoryImpl
