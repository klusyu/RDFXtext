/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.rDFTurtle.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.rDFTurtle.Base;
import org.xtext.example.mydsl.rDFTurtle.Directive;
import org.xtext.example.mydsl.rDFTurtle.PrefixID;
import org.xtext.example.mydsl.rDFTurtle.RDFTurtlePackage;
import org.xtext.example.mydsl.rDFTurtle.SparqlBase;
import org.xtext.example.mydsl.rDFTurtle.SparqlPrefix;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Directive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.rDFTurtle.impl.DirectiveImpl#getPrefix <em>Prefix</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.rDFTurtle.impl.DirectiveImpl#getBase <em>Base</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.rDFTurtle.impl.DirectiveImpl#getSparqlPrefix <em>Sparql Prefix</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.rDFTurtle.impl.DirectiveImpl#getSparqlBase <em>Sparql Base</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DirectiveImpl extends MinimalEObjectImpl.Container implements Directive
{
  /**
   * The cached value of the '{@link #getPrefix() <em>Prefix</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrefix()
   * @generated
   * @ordered
   */
  protected PrefixID prefix;

  /**
   * The cached value of the '{@link #getBase() <em>Base</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBase()
   * @generated
   * @ordered
   */
  protected Base base;

  /**
   * The cached value of the '{@link #getSparqlPrefix() <em>Sparql Prefix</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSparqlPrefix()
   * @generated
   * @ordered
   */
  protected SparqlPrefix sparqlPrefix;

  /**
   * The cached value of the '{@link #getSparqlBase() <em>Sparql Base</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSparqlBase()
   * @generated
   * @ordered
   */
  protected SparqlBase sparqlBase;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DirectiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RDFTurtlePackage.Literals.DIRECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrefixID getPrefix()
  {
    return prefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrefix(PrefixID newPrefix, NotificationChain msgs)
  {
    PrefixID oldPrefix = prefix;
    prefix = newPrefix;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__PREFIX, oldPrefix, newPrefix);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrefix(PrefixID newPrefix)
  {
    if (newPrefix != prefix)
    {
      NotificationChain msgs = null;
      if (prefix != null)
        msgs = ((InternalEObject)prefix).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__PREFIX, null, msgs);
      if (newPrefix != null)
        msgs = ((InternalEObject)newPrefix).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__PREFIX, null, msgs);
      msgs = basicSetPrefix(newPrefix, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__PREFIX, newPrefix, newPrefix));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Base getBase()
  {
    return base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBase(Base newBase, NotificationChain msgs)
  {
    Base oldBase = base;
    base = newBase;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__BASE, oldBase, newBase);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBase(Base newBase)
  {
    if (newBase != base)
    {
      NotificationChain msgs = null;
      if (base != null)
        msgs = ((InternalEObject)base).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__BASE, null, msgs);
      if (newBase != null)
        msgs = ((InternalEObject)newBase).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__BASE, null, msgs);
      msgs = basicSetBase(newBase, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__BASE, newBase, newBase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SparqlPrefix getSparqlPrefix()
  {
    return sparqlPrefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSparqlPrefix(SparqlPrefix newSparqlPrefix, NotificationChain msgs)
  {
    SparqlPrefix oldSparqlPrefix = sparqlPrefix;
    sparqlPrefix = newSparqlPrefix;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX, oldSparqlPrefix, newSparqlPrefix);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSparqlPrefix(SparqlPrefix newSparqlPrefix)
  {
    if (newSparqlPrefix != sparqlPrefix)
    {
      NotificationChain msgs = null;
      if (sparqlPrefix != null)
        msgs = ((InternalEObject)sparqlPrefix).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX, null, msgs);
      if (newSparqlPrefix != null)
        msgs = ((InternalEObject)newSparqlPrefix).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX, null, msgs);
      msgs = basicSetSparqlPrefix(newSparqlPrefix, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX, newSparqlPrefix, newSparqlPrefix));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SparqlBase getSparqlBase()
  {
    return sparqlBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSparqlBase(SparqlBase newSparqlBase, NotificationChain msgs)
  {
    SparqlBase oldSparqlBase = sparqlBase;
    sparqlBase = newSparqlBase;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__SPARQL_BASE, oldSparqlBase, newSparqlBase);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSparqlBase(SparqlBase newSparqlBase)
  {
    if (newSparqlBase != sparqlBase)
    {
      NotificationChain msgs = null;
      if (sparqlBase != null)
        msgs = ((InternalEObject)sparqlBase).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__SPARQL_BASE, null, msgs);
      if (newSparqlBase != null)
        msgs = ((InternalEObject)newSparqlBase).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RDFTurtlePackage.DIRECTIVE__SPARQL_BASE, null, msgs);
      msgs = basicSetSparqlBase(newSparqlBase, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RDFTurtlePackage.DIRECTIVE__SPARQL_BASE, newSparqlBase, newSparqlBase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RDFTurtlePackage.DIRECTIVE__PREFIX:
        return basicSetPrefix(null, msgs);
      case RDFTurtlePackage.DIRECTIVE__BASE:
        return basicSetBase(null, msgs);
      case RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX:
        return basicSetSparqlPrefix(null, msgs);
      case RDFTurtlePackage.DIRECTIVE__SPARQL_BASE:
        return basicSetSparqlBase(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RDFTurtlePackage.DIRECTIVE__PREFIX:
        return getPrefix();
      case RDFTurtlePackage.DIRECTIVE__BASE:
        return getBase();
      case RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX:
        return getSparqlPrefix();
      case RDFTurtlePackage.DIRECTIVE__SPARQL_BASE:
        return getSparqlBase();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RDFTurtlePackage.DIRECTIVE__PREFIX:
        setPrefix((PrefixID)newValue);
        return;
      case RDFTurtlePackage.DIRECTIVE__BASE:
        setBase((Base)newValue);
        return;
      case RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX:
        setSparqlPrefix((SparqlPrefix)newValue);
        return;
      case RDFTurtlePackage.DIRECTIVE__SPARQL_BASE:
        setSparqlBase((SparqlBase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RDFTurtlePackage.DIRECTIVE__PREFIX:
        setPrefix((PrefixID)null);
        return;
      case RDFTurtlePackage.DIRECTIVE__BASE:
        setBase((Base)null);
        return;
      case RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX:
        setSparqlPrefix((SparqlPrefix)null);
        return;
      case RDFTurtlePackage.DIRECTIVE__SPARQL_BASE:
        setSparqlBase((SparqlBase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RDFTurtlePackage.DIRECTIVE__PREFIX:
        return prefix != null;
      case RDFTurtlePackage.DIRECTIVE__BASE:
        return base != null;
      case RDFTurtlePackage.DIRECTIVE__SPARQL_PREFIX:
        return sparqlPrefix != null;
      case RDFTurtlePackage.DIRECTIVE__SPARQL_BASE:
        return sparqlBase != null;
    }
    return super.eIsSet(featureID);
  }

} //DirectiveImpl
