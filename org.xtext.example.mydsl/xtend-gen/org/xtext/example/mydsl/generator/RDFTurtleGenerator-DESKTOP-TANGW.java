/**
 * generated by Xtext 2.32.0.M3
 */
package org.xtext.example.mydsl.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.rDFTurtle.Base;
import org.xtext.example.mydsl.rDFTurtle.Directive;
import org.xtext.example.mydsl.rDFTurtle.PredicateObject;
import org.xtext.example.mydsl.rDFTurtle.PrefixID;
import org.xtext.example.mydsl.rDFTurtle.Statement;
import org.xtext.example.mydsl.rDFTurtle.Subject;
import org.xtext.example.mydsl.rDFTurtle.Triples;
import org.xtext.example.mydsl.rDFTurtle.TurtleDoc;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RDFTurtleGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String path = "rdf_example.xmi";
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile(path, this.toXMI(((TurtleDoc) _head)));
  }

  protected String toXMI(final TurtleDoc doc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<rdf:TurtleDoc xmi:version=\"2.0\" ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xmlns:xmi=\"http://www.omg.org/XMI\" ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xmlns:rml=\"http://www.xtext.org/example/rdf/RDFTurtle\">");
    _builder.newLine();
    {
      EList<Statement> _statements = doc.getStatements();
      for(final Statement s : _statements) {
        {
          Directive _directive = s.getDirective();
          boolean _tripleNotEquals = (_directive != null);
          if (_tripleNotEquals) {
            _builder.append("\t");
            String _generateNamespace = this.generateNamespace(s.getDirective());
            _builder.append(_generateNamespace, "\t");
            _builder.newLineIfNotEmpty();
          } else {
            Triples _triples = s.getTriples();
            boolean _tripleNotEquals_1 = (_triples != null);
            if (_tripleNotEquals_1) {
              _builder.append("\t");
              this.generateTriple(s.getTriples());
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("</rdf:TurtleDoc>");
    _builder.newLine();
    return _builder.toString();
  }

  protected String generateNamespace(final Directive ns) {
    String ePrefix = "";
    String eIRI = "";
    String prefix = "";
    String iri = "";
    PrefixID _prefix = ns.getPrefix();
    boolean _tripleNotEquals = (_prefix != null);
    if (_tripleNotEquals) {
      String _prefixName = ns.getPrefix().getPrefixName();
      boolean _tripleNotEquals_1 = (_prefixName != null);
      if (_tripleNotEquals_1) {
        prefix = ns.getPrefix().getPrefixName();
        StringConcatenation _builder = new StringConcatenation();
        _builder.append(" ");
        _builder.append("prefix=\"");
        _builder.append(prefix, " ");
        _builder.append("\"");
        ePrefix = _builder.toString();
      }
      iri = ns.getPrefix().getIriref();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(" ");
      _builder_1.append("iri=\"");
      _builder_1.append(iri, " ");
      _builder_1.append("\"");
      eIRI = _builder_1.toString();
    } else {
      Base _base = ns.getBase();
      boolean _tripleNotEquals_2 = (_base != null);
      if (_tripleNotEquals_2) {
        prefix = "base";
        iri = ns.getBase().getIriref();
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append(" ");
        _builder_2.append("base=\"");
        _builder_2.append(iri, " ");
        _builder_2.append("\"");
        eIRI = _builder_2.toString();
      }
    }
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("<directives");
    _builder_3.append(ePrefix);
    _builder_3.append(eIRI);
    _builder_3.append("/>");
    String result = _builder_3.toString();
    return result;
  }

  protected void generateTriple(final Triples triples) {
    Subject subject = triples.getSubject();
    EList<PredicateObject> _predicateObjects = triples.getPredicateObjectList().getPredicateObjects();
    for (final PredicateObject po : _predicateObjects) {
    }
  }
}
